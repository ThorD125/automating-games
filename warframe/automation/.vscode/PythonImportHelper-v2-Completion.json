[
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "PROMPT",
        "importPath": "cmd",
        "description": "cmd",
        "isExtraImport": true,
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "screen_search",
        "description": "screen_search",
        "isExtraImport": true,
        "detail": "screen_search",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "msvcrt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msvcrt",
        "description": "msvcrt",
        "detail": "msvcrt",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard",
        "description": "keyboard",
        "detail": "keyboard",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "win32gui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32gui",
        "description": "win32gui",
        "detail": "win32gui",
        "documentation": {}
    },
    {
        "label": "pywin32_system32",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pywin32_system32",
        "description": "pywin32_system32",
        "detail": "pywin32_system32",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case _:\n            image",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case _:",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221228201728",
        "description": ".history.combined_20221228201728",
        "peekOfCode": "frames = [\"trinity\", \"harrow\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"inptu\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221228201728",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            clicking(\"2\", 0, 0, 10)",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229000104",
        "description": ".history.combined_20221229000104",
        "peekOfCode": "frames = [\"trinity\", \"harrow\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"inptu\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229000104",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            clicking(\"2\", 0, 0, 10)",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229000112",
        "description": ".history.combined_20221229000112",
        "peekOfCode": "frames = [\"trinity\", \"harrow\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"inptu\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229000112",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229000117",
        "description": ".history.combined_20221229000117",
        "peekOfCode": "frames = [\"trinity\", \"harrow\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"inptu\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229000117",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229000521",
        "description": ".history.combined_20221229000521",
        "peekOfCode": "frames = [\"trinity\", \"harrow\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"inptu\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229000521",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229000524",
        "description": ".history.combined_20221229000524",
        "peekOfCode": "frames = [\"trinity\", \"harrow\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"inptu\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229000524",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229000526",
        "description": ".history.combined_20221229000526",
        "peekOfCode": "frames = [\"trinity\", \"harrow\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"inptu\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229000526",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229000630",
        "description": ".history.combined_20221229000630",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"inptu\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229000630",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229000646",
        "description": ".history.combined_20221229000646",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"input\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229000646",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229000749",
        "description": ".history.combined_20221229000749",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"input\")\n    time.sleep(10)\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229000749",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229001001",
        "description": ".history.combined_20221229001001",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229001001",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread\n        endthread = True",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229001032",
        "description": ".history.combined_20221229001032",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229001032",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229001051",
        "description": ".history.combined_20221229001051",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    # global image\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229001051",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229001307",
        "description": ".history.combined_20221229001307",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    global image\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229001307",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229001322",
        "description": ".history.combined_20221229001322",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229001322",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    return Search(image).imagesearch()[0] != -1 if image != '___' else True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229001323",
        "description": ".history.combined_20221229001323",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229001323",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():\n    # search = Search(image)",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "def needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    if image != '___':\n        return Search(image).imagesearch()[0] != -1\n    else:\n        return True\n# needimage(\"onkonobg.png\")\ndef mythread():",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    # search = Search(image)\n    # pos = search.imagesearch()\n    # return pos[0] != -1 if image != '___' else True\n    if image != '___':\n        return Search(image).imagesearch()[0] != -1\n    else:\n        return True\n# needimage(\"onkonobg.png\")",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229001632",
        "description": ".history.combined_20221229001632",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229001632",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():\n    if image != '___':",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "def needimage():\n    if image != '___':\n        return Search(image).imagesearch()[0] != -1\n    else:\n        return True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    if image != '___':\n        return Search(image).imagesearch()[0] != -1\n    else:\n        return True\n# needimage(\"onkonobg.png\")\ndef mythread():\n    print(\"inmythread\")\n    while needimage():",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229001658",
        "description": ".history.combined_20221229001658",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229001658",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():\n    if image != '___':",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "def needimage():\n    if image != '___':\n        return Search(image).imagesearch()[0] != -1\n    else:\n        return True\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    if image != '___':\n        return Search(image).imagesearch()[0] != -1\n    else:\n        return True\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": ".history.combined_20221229001700",
        "description": ".history.combined_20221229001700",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": ".history.combined_20221229001700",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229002402",
        "description": ".history.easyclicktesting_20221229002402",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229002402",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229002410",
        "description": ".history.easyclicktesting_20221229002410",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229002410",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229002411",
        "description": ".history.easyclicktesting_20221229002411",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229002411",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229002415",
        "description": ".history.easyclicktesting_20221229002415",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229002415",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229002537",
        "description": ".history.easyclicktesting_20221229002537",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229002537",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229002816",
        "description": ".history.easyclicktesting_20221229002816",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229002816",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229002819",
        "description": ".history.easyclicktesting_20221229002819",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229002819",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229002834",
        "description": ".history.easyclicktesting_20221229002834",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229002834",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003011",
        "description": ".history.easyclicktesting_20221229003011",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003011",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003018",
        "description": ".history.easyclicktesting_20221229003018",
        "peekOfCode": "notepad_handle = pywin32_system32.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\npywin32_system32.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003018",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003032",
        "description": ".history.easyclicktesting_20221229003032",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003032",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003033",
        "description": ".history.easyclicktesting_20221229003033",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003033",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003042",
        "description": ".history.easyclicktesting_20221229003042",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003042",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003311",
        "description": ".history.easyclicktesting_20221229003311",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003311",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003322",
        "description": ".history.easyclicktesting_20221229003322",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003322",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003323",
        "description": ".history.easyclicktesting_20221229003323",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003323",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003324",
        "description": ".history.easyclicktesting_20221229003324",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003324",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003417",
        "description": ".history.easyclicktesting_20221229003417",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003417",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003458",
        "description": ".history.easyclicktesting_20221229003458",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None,)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"Notepad\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003458",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003621",
        "description": ".history.easyclicktesting_20221229003621",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003621",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003646",
        "description": ".history.easyclicktesting_20221229003646",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003646",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003859",
        "description": ".history.easyclicktesting_20221229003859",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\nprint(notepad_handle)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229003859",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003923",
        "description": ".history.easyclicktesting_20221229003923",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\nprint(\"efesf\")\nprint(notepad_handle)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229003923",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003928",
        "description": ".history.easyclicktesting_20221229003928",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\nprint(\"efesf\")\nprint(notepad_handle)\nprint(\"efesf\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)",
        "detail": ".history.easyclicktesting_20221229003928",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003932",
        "description": ".history.easyclicktesting_20221229003932",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\nprint(notepad_handle)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229003932",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003935",
        "description": ".history.easyclicktesting_20221229003935",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229003935",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229003953",
        "description": ".history.easyclicktesting_20221229003953",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\nwin32gui.GetForegroundWindow()\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229003953",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004001",
        "description": ".history.easyclicktesting_20221229004001",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\nwindow = win32gui.GetForegroundWindow()\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229004001",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004001",
        "description": ".history.easyclicktesting_20221229004001",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229004001",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004006",
        "description": ".history.easyclicktesting_20221229004006",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\nwindow = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004006",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004006",
        "description": ".history.easyclicktesting_20221229004006",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\ntime.sleep(3)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229004006",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004024",
        "description": ".history.easyclicktesting_20221229004024",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004024",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004024",
        "description": ".history.easyclicktesting_20221229004024",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(notepad_handle)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229004024",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004044",
        "description": ".history.easyclicktesting_20221229004044",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(v)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004044",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004044",
        "description": ".history.easyclicktesting_20221229004044",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(v)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229004044",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004049",
        "description": ".history.easyclicktesting_20221229004049",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(window)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004049",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004049",
        "description": ".history.easyclicktesting_20221229004049",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(window)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229004049",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004108",
        "description": ".history.easyclicktesting_20221229004108",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004108",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004108",
        "description": ".history.easyclicktesting_20221229004108",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229004108",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004141",
        "description": ".history.easyclicktesting_20221229004141",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')",
        "detail": ".history.easyclicktesting_20221229004141",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004141",
        "description": ".history.easyclicktesting_20221229004141",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004141",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004141",
        "description": ".history.easyclicktesting_20221229004141",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(window)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229004141",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004202",
        "description": ".history.easyclicktesting_20221229004202",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(odlwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')",
        "detail": ".history.easyclicktesting_20221229004202",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004202",
        "description": ".history.easyclicktesting_20221229004202",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(odlwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004202",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004202",
        "description": ".history.easyclicktesting_20221229004202",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(odlwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229004202",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004204",
        "description": ".history.easyclicktesting_20221229004204",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')",
        "detail": ".history.easyclicktesting_20221229004204",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004204",
        "description": ".history.easyclicktesting_20221229004204",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004204",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004204",
        "description": ".history.easyclicktesting_20221229004204",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229004204",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004225",
        "description": ".history.easyclicktesting_20221229004225",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')",
        "detail": ".history.easyclicktesting_20221229004225",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004225",
        "description": ".history.easyclicktesting_20221229004225",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)",
        "detail": ".history.easyclicktesting_20221229004225",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004225",
        "description": ".history.easyclicktesting_20221229004225",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(\"2623744\")\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229004225",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004323",
        "description": ".history.easyclicktesting_20221229004323",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Unitled - Notepad\")\nwarframeapp = \"2623744\"\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')",
        "detail": ".history.easyclicktesting_20221229004323",
        "documentation": {}
    },
    {
        "label": "warframeapp",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004323",
        "description": ".history.easyclicktesting_20221229004323",
        "peekOfCode": "warframeapp = \"2623744\"\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')",
        "detail": ".history.easyclicktesting_20221229004323",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004323",
        "description": ".history.easyclicktesting_20221229004323",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)",
        "detail": ".history.easyclicktesting_20221229004323",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004323",
        "description": ".history.easyclicktesting_20221229004323",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229004323",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004329",
        "description": ".history.easyclicktesting_20221229004329",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\nwarframeapp = \"2623744\"\nwarframeapp = \"2623744\"\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window",
        "detail": ".history.easyclicktesting_20221229004329",
        "documentation": {}
    },
    {
        "label": "warframeapp",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004329",
        "description": ".history.easyclicktesting_20221229004329",
        "peekOfCode": "warframeapp = \"2623744\"\nwarframeapp = \"2623744\"\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')",
        "detail": ".history.easyclicktesting_20221229004329",
        "documentation": {}
    },
    {
        "label": "warframeapp",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004329",
        "description": ".history.easyclicktesting_20221229004329",
        "peekOfCode": "warframeapp = \"2623744\"\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')",
        "detail": ".history.easyclicktesting_20221229004329",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004329",
        "description": ".history.easyclicktesting_20221229004329",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)",
        "detail": ".history.easyclicktesting_20221229004329",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004329",
        "description": ".history.easyclicktesting_20221229004329",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229004329",
        "documentation": {}
    },
    {
        "label": "notepad_handle",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004336",
        "description": ".history.easyclicktesting_20221229004336",
        "peekOfCode": "notepad_handle = win32gui.FindWindow(None, \"Notepad\")\nwarframeapp = \"2623744\"\n# warframeapp = win32gui.FindWindow(None, \"Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window",
        "detail": ".history.easyclicktesting_20221229004336",
        "documentation": {}
    },
    {
        "label": "warframeapp",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004336",
        "description": ".history.easyclicktesting_20221229004336",
        "peekOfCode": "warframeapp = \"2623744\"\n# warframeapp = win32gui.FindWindow(None, \"Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')",
        "detail": ".history.easyclicktesting_20221229004336",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004336",
        "description": ".history.easyclicktesting_20221229004336",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)",
        "detail": ".history.easyclicktesting_20221229004336",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004336",
        "description": ".history.easyclicktesting_20221229004336",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229004336",
        "documentation": {}
    },
    {
        "label": "warframeapp",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004339",
        "description": ".history.easyclicktesting_20221229004339",
        "peekOfCode": "warframeapp = \"2623744\"\n# warframeapp = win32gui.FindWindow(None, \"Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')",
        "detail": ".history.easyclicktesting_20221229004339",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004339",
        "description": ".history.easyclicktesting_20221229004339",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nwindow = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)",
        "detail": ".history.easyclicktesting_20221229004339",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004339",
        "description": ".history.easyclicktesting_20221229004339",
        "peekOfCode": "window = win32gui.GetForegroundWindow()\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\npyautogui.press(\"{NUMPAD2}\")\n# def click():",
        "detail": ".history.easyclicktesting_20221229004339",
        "documentation": {}
    },
    {
        "label": "warframeapp",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004351",
        "description": ".history.easyclicktesting_20221229004351",
        "peekOfCode": "warframeapp = \"2623744\"\n# warframeapp = win32gui.FindWindow(None, \"Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')",
        "detail": ".history.easyclicktesting_20221229004351",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004351",
        "description": ".history.easyclicktesting_20221229004351",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nprint(oldwindow)\n# Set the focus to the Notepad window\nwin32gui.SetForegroundWindow(warframeapp)\n# Send the key press event to the Notepad window\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004351",
        "documentation": {}
    },
    {
        "label": "warframeapp",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004358",
        "description": ".history.easyclicktesting_20221229004358",
        "peekOfCode": "warframeapp = \"2623744\"\n# warframeapp = win32gui.FindWindow(None, \"Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nprint(oldwindow)\nwin32gui.SetForegroundWindow(warframeapp)\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\npyautogui.press(\"{NUMPAD2}\")",
        "detail": ".history.easyclicktesting_20221229004358",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004358",
        "description": ".history.easyclicktesting_20221229004358",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nprint(oldwindow)\nwin32gui.SetForegroundWindow(warframeapp)\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\npyautogui.press(\"{NUMPAD2}\")\n# def click():\n#     pyautogui.press(\"NUM2\")",
        "detail": ".history.easyclicktesting_20221229004358",
        "documentation": {}
    },
    {
        "label": "warframeapp",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004409",
        "description": ".history.easyclicktesting_20221229004409",
        "peekOfCode": "warframeapp = \"2623744\"\n# warframeapp = win32gui.FindWindow(None, \"Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nprint(oldwindow)\nwin32gui.SetForegroundWindow(warframeapp)\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\n# def click():",
        "detail": ".history.easyclicktesting_20221229004409",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": ".history.easyclicktesting_20221229004409",
        "description": ".history.easyclicktesting_20221229004409",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nprint(oldwindow)\nwin32gui.SetForegroundWindow(warframeapp)\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\n# def click():\n#     pyautogui.press(\"NUM2\")\n#     click()",
        "detail": ".history.easyclicktesting_20221229004409",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.harrow_20221228201728",
        "description": ".history.harrow_20221228201728",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    search = Search(\"onkonobg.png\")",
        "detail": ".history.harrow_20221228201728",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.harrow_20221228201728",
        "description": ".history.harrow_20221228201728",
        "peekOfCode": "def mythread():\n    search = Search(\"onkonobg.png\")\n    pos = search.imagesearch()\n    if pos[0] != -1:\n        clicking(\"4\", 5, 7, 14)\n    else:\n        print(\"else\")\n        time.sleep(1)\n    if endthread:\n        mythread()",
        "detail": ".history.harrow_20221228201728",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.harrow_20221228201728",
        "description": ".history.harrow_20221228201728",
        "peekOfCode": "keyboard = Controller()\ntime.sleep(10)\nendthread = True\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")",
        "detail": ".history.harrow_20221228201728",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.harrow_20221228201728",
        "description": ".history.harrow_20221228201728",
        "peekOfCode": "endthread = True\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():",
        "detail": ".history.harrow_20221228201728",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.harrow_20221228201728",
        "description": ".history.harrow_20221228201728",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\n# b = threading.Thread(target=mythread, args=(lambda: endthread,))\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = False\nb.join()",
        "detail": ".history.harrow_20221228201728",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.harrow_20221228201728",
        "description": ".history.harrow_20221228201728",
        "peekOfCode": "endthread = False\nb.join()",
        "detail": ".history.harrow_20221228201728",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.harrow_20221228235733",
        "description": ".history.harrow_20221228235733",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    search = Search(\"onkonobg.png\")",
        "detail": ".history.harrow_20221228235733",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.harrow_20221228235733",
        "description": ".history.harrow_20221228235733",
        "peekOfCode": "def mythread():\n    search = Search(\"onkonobg.png\")\n    pos = search.imagesearch()\n    if pos[0] != -1:\n        clicking(\"4\", 5, 7, 14)\n    else:\n        print(\"else\")\n        time.sleep(1)\n    if endthread:\n        mythread()",
        "detail": ".history.harrow_20221228235733",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.harrow_20221228235733",
        "description": ".history.harrow_20221228235733",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\n# b = threading.Thread(target=mythread, args=(lambda: endthread,))\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = False\nb.join()",
        "detail": ".history.harrow_20221228235733",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.harrow_20221228235733",
        "description": ".history.harrow_20221228235733",
        "peekOfCode": "endthread = False\nb.join()",
        "detail": ".history.harrow_20221228235733",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.harrow_20221228235738",
        "description": ".history.harrow_20221228235738",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    search = Search(\"onkonobg.png\")",
        "detail": ".history.harrow_20221228235738",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.harrow_20221228235738",
        "description": ".history.harrow_20221228235738",
        "peekOfCode": "def mythread():\n    search = Search(\"onkonobg.png\")\n    pos = search.imagesearch()\n    if pos[0] != -1:\n        clicking(\"4\", 5, 7, 14)\n    else:\n        print(\"else\")\n        time.sleep(1)\n    if endthread:\n        mythread()",
        "detail": ".history.harrow_20221228235738",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.harrow_20221228235738",
        "description": ".history.harrow_20221228235738",
        "peekOfCode": "keyboard = Controller()\ntime.sleep(10)\nendthread = True\nb = threading.Thread(name='background', target=mythread)\n# b = threading.Thread(target=mythread, args=(lambda: endthread,))\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = False\nb.join()",
        "detail": ".history.harrow_20221228235738",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.harrow_20221228235738",
        "description": ".history.harrow_20221228235738",
        "peekOfCode": "endthread = True\nb = threading.Thread(name='background', target=mythread)\n# b = threading.Thread(target=mythread, args=(lambda: endthread,))\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = False\nb.join()",
        "detail": ".history.harrow_20221228235738",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.harrow_20221228235738",
        "description": ".history.harrow_20221228235738",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\n# b = threading.Thread(target=mythread, args=(lambda: endthread,))\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = False\nb.join()",
        "detail": ".history.harrow_20221228235738",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.harrow_20221228235738",
        "description": ".history.harrow_20221228235738",
        "peekOfCode": "endthread = False\nb.join()",
        "detail": ".history.harrow_20221228235738",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228201728",
        "description": ".history.nekros_terrify_20221228201728",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    while True:",
        "detail": ".history.nekros_terrify_20221228201728",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228201728",
        "description": ".history.nekros_terrify_20221228201728",
        "peekOfCode": "def mythread():\n    while True:\n        clicking(\"2\", 0, 0, 0.1)\n        if endthread:\n            break\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True",
        "detail": ".history.nekros_terrify_20221228201728",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201728",
        "description": ".history.nekros_terrify_20221228201728",
        "peekOfCode": "keyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")",
        "detail": ".history.nekros_terrify_20221228201728",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201728",
        "description": ".history.nekros_terrify_20221228201728",
        "peekOfCode": "key = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)",
        "detail": ".history.nekros_terrify_20221228201728",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201728",
        "description": ".history.nekros_terrify_20221228201728",
        "peekOfCode": "endthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)",
        "detail": ".history.nekros_terrify_20221228201728",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201728",
        "description": ".history.nekros_terrify_20221228201728",
        "peekOfCode": "search = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():",
        "detail": ".history.nekros_terrify_20221228201728",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201728",
        "description": ".history.nekros_terrify_20221228201728",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228201728",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201728",
        "description": ".history.nekros_terrify_20221228201728",
        "peekOfCode": "endthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228201728",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228201858",
        "description": ".history.nekros_terrify_20221228201858",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    while True:",
        "detail": ".history.nekros_terrify_20221228201858",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228201858",
        "description": ".history.nekros_terrify_20221228201858",
        "peekOfCode": "def mythread():\n    while True:\n        clicking(\"2\", 0, 0, 10)\n        if endthread:\n            break\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True",
        "detail": ".history.nekros_terrify_20221228201858",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201858",
        "description": ".history.nekros_terrify_20221228201858",
        "peekOfCode": "keyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")",
        "detail": ".history.nekros_terrify_20221228201858",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201858",
        "description": ".history.nekros_terrify_20221228201858",
        "peekOfCode": "key = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)",
        "detail": ".history.nekros_terrify_20221228201858",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201858",
        "description": ".history.nekros_terrify_20221228201858",
        "peekOfCode": "endthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)",
        "detail": ".history.nekros_terrify_20221228201858",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201858",
        "description": ".history.nekros_terrify_20221228201858",
        "peekOfCode": "search = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():",
        "detail": ".history.nekros_terrify_20221228201858",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201858",
        "description": ".history.nekros_terrify_20221228201858",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228201858",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228201858",
        "description": ".history.nekros_terrify_20221228201858",
        "peekOfCode": "endthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228201858",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228213136",
        "description": ".history.nekros_terrify_20221228213136",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    while True:",
        "detail": ".history.nekros_terrify_20221228213136",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228213136",
        "description": ".history.nekros_terrify_20221228213136",
        "peekOfCode": "def mythread():\n    while True:\n        clicking(\"2\", 0, 0, 10)\n        if endthread:\n            break\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True",
        "detail": ".history.nekros_terrify_20221228213136",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228213136",
        "description": ".history.nekros_terrify_20221228213136",
        "peekOfCode": "keyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")",
        "detail": ".history.nekros_terrify_20221228213136",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228213136",
        "description": ".history.nekros_terrify_20221228213136",
        "peekOfCode": "key = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)",
        "detail": ".history.nekros_terrify_20221228213136",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228213136",
        "description": ".history.nekros_terrify_20221228213136",
        "peekOfCode": "endthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)",
        "detail": ".history.nekros_terrify_20221228213136",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228213136",
        "description": ".history.nekros_terrify_20221228213136",
        "peekOfCode": "search = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():",
        "detail": ".history.nekros_terrify_20221228213136",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228213136",
        "description": ".history.nekros_terrify_20221228213136",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228213136",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228213136",
        "description": ".history.nekros_terrify_20221228213136",
        "peekOfCode": "endthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228213136",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228235725",
        "description": ".history.nekros_terrify_20221228235725",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    while True:",
        "detail": ".history.nekros_terrify_20221228235725",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228235725",
        "description": ".history.nekros_terrify_20221228235725",
        "peekOfCode": "def mythread():\n    while True:\n        clicking(\"2\", 0, 0, 10)\n        if endthread:\n            break\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True",
        "detail": ".history.nekros_terrify_20221228235725",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228235725",
        "description": ".history.nekros_terrify_20221228235725",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228235725",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228235725",
        "description": ".history.nekros_terrify_20221228235725",
        "peekOfCode": "endthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228235725",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228235728",
        "description": ".history.nekros_terrify_20221228235728",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    while True:",
        "detail": ".history.nekros_terrify_20221228235728",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.nekros_terrify_20221228235728",
        "description": ".history.nekros_terrify_20221228235728",
        "peekOfCode": "def mythread():\n    while True:\n        clicking(\"2\", 0, 0, 10)\n        if endthread:\n            break\nkeyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")",
        "detail": ".history.nekros_terrify_20221228235728",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228235728",
        "description": ".history.nekros_terrify_20221228235728",
        "peekOfCode": "keyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True",
        "detail": ".history.nekros_terrify_20221228235728",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228235728",
        "description": ".history.nekros_terrify_20221228235728",
        "peekOfCode": "key = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228235728",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228235728",
        "description": ".history.nekros_terrify_20221228235728",
        "peekOfCode": "endthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228235728",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228235728",
        "description": ".history.nekros_terrify_20221228235728",
        "peekOfCode": "search = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228235728",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228235728",
        "description": ".history.nekros_terrify_20221228235728",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228235728",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.nekros_terrify_20221228235728",
        "description": ".history.nekros_terrify_20221228235728",
        "peekOfCode": "endthread = True\nb.join()",
        "detail": ".history.nekros_terrify_20221228235728",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.trinity_20221228201728",
        "description": ".history.trinity_20221228201728",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    while True:",
        "detail": ".history.trinity_20221228201728",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.trinity_20221228201728",
        "description": ".history.trinity_20221228201728",
        "peekOfCode": "def mythread():\n    while True:\n        clicking(\"2\", 0, 0, 0.1)\n        if endthread:\n            break\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True",
        "detail": ".history.trinity_20221228201728",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.trinity_20221228201728",
        "description": ".history.trinity_20221228201728",
        "peekOfCode": "keyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")",
        "detail": ".history.trinity_20221228201728",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": ".history.trinity_20221228201728",
        "description": ".history.trinity_20221228201728",
        "peekOfCode": "key = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)",
        "detail": ".history.trinity_20221228201728",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.trinity_20221228201728",
        "description": ".history.trinity_20221228201728",
        "peekOfCode": "endthread = False\nsearch = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)",
        "detail": ".history.trinity_20221228201728",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": ".history.trinity_20221228201728",
        "description": ".history.trinity_20221228201728",
        "peekOfCode": "search = Search(\"exit.png\")\ndef clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():",
        "detail": ".history.trinity_20221228201728",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.trinity_20221228201728",
        "description": ".history.trinity_20221228201728",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.trinity_20221228201728",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.trinity_20221228201728",
        "description": ".history.trinity_20221228201728",
        "peekOfCode": "endthread = True\nb.join()",
        "detail": ".history.trinity_20221228201728",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": ".history.trinity_20221228235635",
        "description": ".history.trinity_20221228235635",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    while True:",
        "detail": ".history.trinity_20221228235635",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": ".history.trinity_20221228235635",
        "description": ".history.trinity_20221228235635",
        "peekOfCode": "def mythread():\n    while True:\n        clicking(\"2\", 0, 0, 0.1)\n        if endthread:\n            break\nkeyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")",
        "detail": ".history.trinity_20221228235635",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": ".history.trinity_20221228235635",
        "description": ".history.trinity_20221228235635",
        "peekOfCode": "keyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True",
        "detail": ".history.trinity_20221228235635",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": ".history.trinity_20221228235635",
        "description": ".history.trinity_20221228235635",
        "peekOfCode": "key = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.trinity_20221228235635",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.trinity_20221228235635",
        "description": ".history.trinity_20221228235635",
        "peekOfCode": "endthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.trinity_20221228235635",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": ".history.trinity_20221228235635",
        "description": ".history.trinity_20221228235635",
        "peekOfCode": "search = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.trinity_20221228235635",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".history.trinity_20221228235635",
        "description": ".history.trinity_20221228235635",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": ".history.trinity_20221228235635",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": ".history.trinity_20221228235635",
        "description": ".history.trinity_20221228235635",
        "peekOfCode": "endthread = True\nb.join()",
        "detail": ".history.trinity_20221228235635",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "def clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():\n    if image != '___':",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "needimage",
        "kind": 2,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "def needimage():\n    if image != '___':\n        return Search(image).imagesearch()[0] != -1\n    else:\n        return True\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "def mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():\n            break\nframe = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "clicklogic",
        "kind": 2,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "def clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":\n            image = \"___\"",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "looplogic",
        "kind": 2,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "def looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")\n        global endthread",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "keyboard = Controller()\ndef clicking(key, castingdelay, castingtime, cooldown):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    time.sleep(castingtime)\n    time.sleep(cooldown)\nglobal image\nimage = \"___\"\ndef needimage():",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "image = \"___\"\ndef needimage():\n    if image != '___':\n        return Search(image).imagesearch()[0] != -1\n    else:\n        return True\ndef mythread():\n    print(\"inmythread\")\n    while needimage():\n        if endthread or \"nomatch\" == clicklogic():",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "frame = \"trinity\"\ndef clicklogic():\n    global image\n    match frame:\n        case \"trinity\":\n            clicking(\"2\", 0, 0, 0.1)\n        case \"harrow\":\n            image = \"harrow.png\"\n            clicking(\"4\", 5, 7, 14)\n        case \"nekros\":",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "b = \"\"\nendthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "endthread = False\ndef looplogic():\n    print(\"inlooplogic\")\n    if frame in frames:\n        global b\n        b = threading.Thread(name='background', target=mythread)\n        time.sleep(5)\n        b.start()\n        mykeypressedboard.wait(\"9\")\n        print(\"Ended\")",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "frames",
        "kind": 5,
        "importPath": "combined",
        "description": "combined",
        "peekOfCode": "frames = [\"trinity\", \"harrow\", \"nekros\"]\nwhile True:\n    image = '___'\n    frame = input(\"input\")\n    print(\"start\")\n    endthread = False\n    looplogic()\n    print(\"end\")",
        "detail": "combined",
        "documentation": {}
    },
    {
        "label": "warframeapp",
        "kind": 5,
        "importPath": "easyclicktesting",
        "description": "easyclicktesting",
        "peekOfCode": "warframeapp = \"2623744\"\n# warframeapp = win32gui.FindWindow(None, \"Notepad\")\noldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nprint(oldwindow)\nwin32gui.SetForegroundWindow(warframeapp)\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\n# def click():",
        "detail": "easyclicktesting",
        "documentation": {}
    },
    {
        "label": "oldwindow",
        "kind": 5,
        "importPath": "easyclicktesting",
        "description": "easyclicktesting",
        "peekOfCode": "oldwindow = win32gui.GetForegroundWindow()\ntime.sleep(3)\nprint(oldwindow)\nwin32gui.SetForegroundWindow(warframeapp)\nkeyboard.press('a')\nkeyboard.release('a')\nwin32gui.SetForegroundWindow(oldwindow)\n# def click():\n#     pyautogui.press(\"NUM2\")\n#     click()",
        "detail": "easyclicktesting",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": "harrow",
        "description": "harrow",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    search = Search(\"onkonobg.png\")",
        "detail": "harrow",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": "harrow",
        "description": "harrow",
        "peekOfCode": "def mythread():\n    search = Search(\"onkonobg.png\")\n    pos = search.imagesearch()\n    if pos[0] != -1:\n        clicking(\"4\", 5, 7, 14)\n    else:\n        print(\"else\")\n        time.sleep(1)\n    if endthread:\n        mythread()",
        "detail": "harrow",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": "harrow",
        "description": "harrow",
        "peekOfCode": "keyboard = Controller()\ntime.sleep(10)\nendthread = True\nb = threading.Thread(name='background', target=mythread)\n# b = threading.Thread(target=mythread, args=(lambda: endthread,))\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = False\nb.join()",
        "detail": "harrow",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": "harrow",
        "description": "harrow",
        "peekOfCode": "endthread = True\nb = threading.Thread(name='background', target=mythread)\n# b = threading.Thread(target=mythread, args=(lambda: endthread,))\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = False\nb.join()",
        "detail": "harrow",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "harrow",
        "description": "harrow",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\n# b = threading.Thread(target=mythread, args=(lambda: endthread,))\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = False\nb.join()",
        "detail": "harrow",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": "harrow",
        "description": "harrow",
        "peekOfCode": "endthread = False\nb.join()",
        "detail": "harrow",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": "nekros_terrify",
        "description": "nekros_terrify",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    while True:",
        "detail": "nekros_terrify",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": "nekros_terrify",
        "description": "nekros_terrify",
        "peekOfCode": "def mythread():\n    while True:\n        clicking(\"2\", 0, 0, 10)\n        if endthread:\n            break\nkeyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")",
        "detail": "nekros_terrify",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": "nekros_terrify",
        "description": "nekros_terrify",
        "peekOfCode": "keyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True",
        "detail": "nekros_terrify",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "nekros_terrify",
        "description": "nekros_terrify",
        "peekOfCode": "key = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": "nekros_terrify",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": "nekros_terrify",
        "description": "nekros_terrify",
        "peekOfCode": "endthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": "nekros_terrify",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": "nekros_terrify",
        "description": "nekros_terrify",
        "peekOfCode": "search = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": "nekros_terrify",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "nekros_terrify",
        "description": "nekros_terrify",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": "nekros_terrify",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": "nekros_terrify",
        "description": "nekros_terrify",
        "peekOfCode": "endthread = True\nb.join()",
        "detail": "nekros_terrify",
        "documentation": {}
    },
    {
        "label": "testclass",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class testclass:\n    i = 123456\n    def f(self):\n        return \"helloworld\"\nx = testclass()\nprint(x.f())",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "x = testclass()\nprint(x.f())",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "clicking",
        "kind": 2,
        "importPath": "trinity",
        "description": "trinity",
        "peekOfCode": "def clicking(key=1, castingdelay=0, castingtime=0, cooldown=0):\n    time.sleep(castingdelay)\n    keyboard.press(key)\n    keyboard.release(key)\n    print(\"delay for casting\")\n    time.sleep(castingtime)\n    print(\"delay for cooldown\")\n    time.sleep(cooldown)\ndef mythread():\n    while True:",
        "detail": "trinity",
        "documentation": {}
    },
    {
        "label": "mythread",
        "kind": 2,
        "importPath": "trinity",
        "description": "trinity",
        "peekOfCode": "def mythread():\n    while True:\n        clicking(\"2\", 0, 0, 0.1)\n        if endthread:\n            break\nkeyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")",
        "detail": "trinity",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 5,
        "importPath": "trinity",
        "description": "trinity",
        "peekOfCode": "keyboard = Controller()\nkey = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True",
        "detail": "trinity",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "trinity",
        "description": "trinity",
        "peekOfCode": "key = \"2\"\ntime.sleep(10)\nendthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": "trinity",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": "trinity",
        "description": "trinity",
        "peekOfCode": "endthread = False\nsearch = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": "trinity",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": "trinity",
        "description": "trinity",
        "peekOfCode": "search = Search(\"exit.png\")\nb = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": "trinity",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "trinity",
        "description": "trinity",
        "peekOfCode": "b = threading.Thread(name='background', target=mythread)\nb.start()\nmykeypressedboard.wait(\"9\")\nprint(\"Ended\")\nendthread = True\nb.join()",
        "detail": "trinity",
        "documentation": {}
    },
    {
        "label": "endthread",
        "kind": 5,
        "importPath": "trinity",
        "description": "trinity",
        "peekOfCode": "endthread = True\nb.join()",
        "detail": "trinity",
        "documentation": {}
    }
]